name: CICD for Serverless Application
run-name: ${{ github.actor }} is doing CICD for serverless application

on:
  push: # A workflow run is triggered every time someone pushes a change to the repository
    branches: [ main, "*" ]

jobs:
  pre-deploy:
    runs-on: ubuntu-latest #run on the latest version of an Ubuntu Linux runner
    steps:
      - run: echo "The job is automatically triggered by a ${{ github.event_name }} event."

  install-dependencies:
    runs-on: ubuntu-latest
    needs: pre-deploy
    steps:
      - name: Check out repository code # checks out your repository onto the runner, allowing you to run scripts or other actions against your code
        uses: actions/checkout@v3
      - name: Run installation of dependencies commands
        run: npm install

  unit-testing: #ensures individual functions perform correctly during the build process
    runs-on: ubuntu-latest
    needs: install-dependencies
    steps:
      - name: Check out repository code
        uses: actions/checkout@v3
      - name: Run installation of dependencies commands
        run: npm install
      - name: Run unit testing command
        run: npm test

   opensource-security:
    runs-on: ubuntu-latest
    needs: unit-testing
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities in dependencies
        uses: snyk/actions/maven@master
        env:
            SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}

  deploy-serverless:
    runs-on: ubuntu-latest
    needs: unit-testing
    steps:
    - uses: actions/checkout@v3
    - name: Use Node.js ${{ matrix.node-version }} #installs the versions in the package-lock.json and prevents updates to the lock file. 
      uses: actions/setup-node@v3 #to install the specified version of the Node.js.
      with:
       node-version: ${{ matrix.node-version }}
    - run: npm ci
    - name: serverless deploy
      uses: serverless/github-action@v3.2 #serverless is deploy via github actions
      with:
          args: deploy
      env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}     
